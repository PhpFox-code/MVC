<h2>Hello from the Index/Hello View!</h2>

<p>The variable that was set in the controller was: Hello world!</p>

<hr />

<h2>How to use this MVC</h2>

<h3>Directory structure</h3>

<pre>
MVC
|-- Library
|   |
|   |-- Core
|   |   |-- Bootstrap.class.php
|   |   |-- Cache.class.php
|   |   |-- Config.class.php
|   |   |-- Controller.class.php
|   |   |-- Format.class.php
|   |   |-- Front.class.php
|   |   |-- Request.class.php
|   |   |-- Router.class.php
|   |   |-- Snippet.class.php
|   |   |-- Store.class.php
|   |   |-- View.class.php
|   |   `-- ViewHelper.class.php
|   |
|   |-- MyProject
|   |   |-- Cache
|   |   |
|   |   |-- Controller
|   |   |   `Index.class.php
|   |   |
|   |   |-- Layout
|   |   |   `default.phtml
|   |   |
|   |   |-- Model
|   |   |
|   |   |-- View
|   |   |   |-- Helper
|   |   |   |
|   |   |   |-- Script
|   |   |   |   `-- Index
|   |   |   |       |-- index.phtml
|   |   |   |       `-- error.phmtl
|   |   |   |
|   |   |   `-- Snippet
|   |   |
|   |   `-- config.ini
|   |
|   |-- autoloader.php
|   `-- global.php
|
`-- Web
    |-- assets
    |   |-- css
    |   |-- img
    |   `-- js
    |
    |-- .htaccess
    `-- index.php</pre>

<hr />

<h3>Setup</h3>

<p>Your project configuration files are in /Library/MyProject/config.ini</p>

<hr />

<h3>Routing</h3>

<p>We parse URI's such as <code>/index/hello/my/variables/go/here/foobar</code> and place it into the GET array. Dumping <code>$_GET</code> will give you:

<pre>array(
	'controller' => 'index',
	'action'     => 'hello',
	'my'         => 'variables',
	'go'         => 'here',
	'foobar'     => true
)</pre>

<p>This will forward the request onto the <code>index</code> controller and into the <code>hello</code> action.</p>

<hr />

<h3>Controllers</h3>

<p>Controllers are created in <code>/Library/MyProject/Controller</code>, the file name begins with an uppercase letter and ends in a <code>.class.php</code> extension, so <code>index</code> would be called <code>Index.class.php</code>.</p>

<h4>Actions</h4>

<p>Actions are named the same as specified in the URI, are lowercase, and end in <code>Action</code>. So the <code>index</code> action will be named <code>indexAction()</code>.</p>

<h4>Caching</h4>

<p>Caching can be turned on or off from your projects configuration file (<code>/Library/MyProject/config.ini</code>), and you can set how long you want before the cache is invalidated.</p>

<pre>[cache]
enable = true
life   = 60</pre>

<h4>Forwarding</h4>

<p>You can forward to another action (or controller) via the <code>$this->forward('action', 'controller')</code> command in a controller's action.</p>

<h4>Layouts</h4>

<p>You can change the layout (layouts are stored in <code>/Library/MyProject/Layout</code>, are lowercase, and end with a <code>.phtml</code> extension) that will wrap the View by calling the <code>$this->setLayout('layout')</code> method in a controllers action.</p>

<h4>Example</h4>

<pre>&lt;?php
class IndexController extends Core_Controller
{
	public $enableCache = true;
	public $cacheLife   = 30;

	public function indexAction() {
		$this->setLayout('new-layout');
		$this->forward('hello');
	}

	public function helloAction() {
		// This is the function that will be rendered to the browser
	}
}</pre>

<hr />

<h3>Views</h3>

<p>Views are stored in the <code>/Library/MyProject/View</code> directory, and each controller has their own directory. So the <code>Index</code> controller's views will be stored in <code>/libs/Views/Index</code>. Each of the controllers actions have a separate view, so the <code>Index</code> controller's <code>hello</code> action will be stored in <code>/Library/MyProject/View/Index/hello.phtml</code>.</p>

<h4>URL generation</h4>

<p>The view has a built in method to generate URL's. You can specify the controller, action and any variables. You can also state whether you want to retain the current pages URL variables (disabled by default). This is called via:</p>

<pre>echo $this->url(
	array(
		'controller'      => 'index',
		'action'          => 'hello',
		'variables'       => array('foo' => 'bar'),
		'variable_retain' => true
	)
);</pre>

<h4>Safe HTML</h4>

<p>You can output HTML to the browser safely by using the <code>$this->safe('evil string')</code> method.</p> <!-- Cached: Sat, 12 Jan 2013 15:25:01 +0000 //-->